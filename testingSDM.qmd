---
title: "testingSDM"
format: html
editor: visual
---

Setup - change to different file

```{r}
library(tidyverse)
library(yaml)
library(sdmpredictors)
library(raster)
library(robis)
library(stars)
library(dismo)
library(terra)
library(maxnet)

vars <- read_yaml("config.yaml")


#Get species data from Obis.
#Input: latin name of a marine species
#Output: data frame with occurence points.
get_species_data <- function(spec) {
  
    species_data <- robis::occurrence(spec)
    withDates <- species_data %>%
      separate(eventDate, into = c("Year", "Month"), sep = "-") %>%
      filter(!is.na(Year)) %>%
      filter(grepl("^\\d{4}$", as.character(Year)))
    
    filtered_data <- subset(withDates, date_year >= vars$start_year & date_year <= vars$end_year)
    
    bounded_data <- filtered_data %>%
      filter(decimalLatitude >= vars$latmin & decimalLatitude <= vars$latmax &
               decimalLongitude >= vars$lonmin & decimalLongitude <= vars$lonmax) %>% 
      dplyr::select(datasetName, decimalLatitude, decimalLongitude, Year, Month, individualCount, vernacularName)
    
    obs_sf <- bounded_data %>% 
    sf::st_as_sf(
      coords = c("decimalLongitude", "decimalLatitude"),
      crs = st_crs(4326))
    return(obs_sf)
  
}

#Input: variables, output:raster stack
get_enviro_data <- function(envvars) {
  #layercodes <- var
  env <- sdmpredictors::load_layers(envvars, equalarea = FALSE, rasterstack = TRUE)
  #Crop
  env <- st_as_stars(env)
  extent <- st_bbox(c(xmin = vars$lonmin, xmax = vars$lonmax, ymin = vars$latmin, ymax = vars$latmax), crs = st_crs(env))
  rc <- st_crop(x = env, y = extent)
  return(rc)
}

ph <- get_enviro_data("BO_ph")

extractEnvData <- function(rasterStack, points) {
  env.stars <- terra::split(rasterStack)
  spec.env <- stars::st_extract(env.stars, sf::st_coordinates(points)) %>%
    dplyr::as_tibble() %>% 
  mutate(pa = 1)
  na.omit(spec.env)
  return(spec.env)
  
}

get_background_points <- function(croppedRaster) {
  
    print("task: get background points using stars")
}

```

```{r}
gget_points <- function(bbox, nsamp = 1000, save_csv = FALSE, file_path = "background_points.csv") {
  # Load the specified environmental layers
  env <- ph
  
  # Convert to stars object
  env_stars <- st_as_stars(env)
  
  # Create a bounding box with CRS
  extent <- st_bbox(c(xmin = bbox$lonmin, xmax = bbox$lonmax, ymin = bbox$latmin, ymax = bbox$latmax), crs = st_crs(env_stars))
  bbox_sf <- st_as_sfc(extent)
  
  # Crop the environmental data to the bounding box
  cropped_env <- st_crop(env_stars, bbox_sf)
  
  # Generate random background points within the bounding box
  set.seed(42)  # For reproducibility
  random_points <- st_sample(bbox_sf, size = nsamp)
  
  # Convert points to a data frame and then to an sf object
  random_points_sf <- st_as_sf(as.data.frame(st_coordinates(random_points)), coords = c("X", "Y"), crs = st_crs(env_stars))
  
  # Crop the points to the extent of the environmental layer
  cropped_points <- st_intersection(random_points_sf, st_as_sf(cropped_env, as_points = FALSE, merge = TRUE))
  
  # Optionally save cropped points to CSV
  if (save_csv) {
    write.csv(st_coordinates(cropped_points), file = file_path, row.names = FALSE)
  }
  
  # Return the cropped environmental data and cropped background points
  return(list(cropped_env = cropped_env, background_points = cropped_points))
}

get_points()
```
```{r}
getNegativePoints <- function(croppedRaster) {
  bbox_sf <- st_as_sfc(st_bbox(c(xmin = vars$lonmin, xmax = vars$lonmax, ymin = vars$latmin, ymax = vars$latmax), crs = st_crs(env)))
  set.seed(42)  # For reproducibility
  random_points <- st_sample(bbox_sf, size = nsamp)
  
  # Convert points to a data frame and then to an sf object
  random_points_sf <- st_as_sf(as.data.frame(st_coordinates(random_points)), coords = c("X", "Y"), crs = st_crs(env_stars))
  
  # Crop the points to the extent of the environmental layer
  cropped_points <- st_intersection(random_points_sf, st_as_sf(ph, as_points = FALSE, merge = TRUE))
  return(cropped_points)
}
getNegativePoints(get_enviro_data("BO_ph"))

```

```{r}
get_enviro_data <- function(envvars) {
  layercodes <- envvars
#envvars <- "BO_ph"
  env <- sdmpredictors::load_layers(envvars, equalarea = FALSE, rasterstack = TRUE)
  #Crop
  env <- st_as_stars(env)
  extent <- st_bbox(c(xmin = vars$lonmin, xmax = vars$lonmax, ymin = vars$latmin, ymax = vars$latmax), crs = st_crs(env))
  rc <- st_crop(x = env, y = extent)
  return(rc)
}

  extent <- st_bbox(c(xmin = bbox$lonmin, xmax = bbox$lonmax, ymin = bbox$latmin, ymax = bbox$latmax), crs = st_crs(env_stars))

  
ph <- get_enviro_data("BO_ph")
get_negative_points(ph)
```


```{r}
plot(envRasterStack)
```

## Call functions to prep data

```{r}
layers <- c(vars$envVars)
envRasterStack <- get_enviro_data(layers)
speciesPoints <- get_species_data(vars$species[1])
absPts <- getNegativePoints(envRasterStack) 

pres <- extractEnvData(envRasterStack, speciesPoints) 

abs <- extractEnvData(envRasterStack, absPts) 

allData <- rbind(pres, abs)
allData

```

## Make model

```{r}

```

## Call functions for future data

```{r}
envRasterStackFuture <- get_enviro_data() 
futureEnv <- terra::split(envRasterStackFuture) %>% 
  dplyr::as_tibble()
na.omit(futureEnv)
#More data processing???
```


## Predict with model

```{r}
for (scenario in scanrios) {
predictMaxNet(model, envRasterStackFuture, clamp = TRUE, type = "cloglog")  ##Plot
  
}
```
